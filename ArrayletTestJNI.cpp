/* DO NOT EDIT THIS FILE - it is machine generated */
#include "ArrayletTestJNI.h"
#include "util.hpp"
#include <iostream>
/* Header for class ArrayletTestJNI */

/*
 * Class:     ArrayletTestJNI
 * Method:    getPrimitiveArrayCritical
 * Signature: ([I)V
 */
JNIEXPORT void JNICALL Java_ArrayletTestJNI_testPrimitiveArrayCriticalArraylets___3DI
  (JNIEnv* env, jobject obj, jdoubleArray array, jint sizePtr) 
{
	std::cout << "Hello from Java_ArrayletTestJNI_testPrimitiveArrayCritical() ********************************" << std::endl;
	jboolean isCopy;
	ElapsedTimer timer;
	double *elems;
	int arrayLength = (int)sizePtr;
	elems = (double*)env->GetPrimitiveArrayCritical(array, &isCopy);
	// Do something here, e.g. change arraylet elements 
	std::cout << "Is it indexible(arraylet leaves) y/n: " << (((bool)isCopy) ? "yes" : "no") << ", arrayLength: " << arrayLength << std::endl;

	std::cout << "Elements at positions multiple of 4096 including 0\n";
	timer.startTimer();
	int i = 0;
	for(; i < arrayLength; i += 4096) {
		// std::cout << i << ":" << elems[i] << ", ";
		elems[i] = 7.5;
	}
	elems[arrayLength-1] = 1234.5678;
	int64_t elapsedTime = timer.getElapsedMicros();
	std::cout << "\nTotal time to write to " << (i/4096) << " buckets was " << elapsedTime << " micro seconds\n";

	env->ReleasePrimitiveArrayCritical(array, (jdouble*)elems, JNI_COMMIT);
}

/*
 * Class:     ArrayletTestJNI
 * Method:    getPrimitiveArrayCritical
 * Signature: ([I)V
 */
JNIEXPORT void JNICALL Java_ArrayletTestJNI_testPrimitiveArrayCriticalArraylets___3CI
  (JNIEnv* env, jobject obj, jcharArray array, jint sizePtr)
{
        std::cout << "Hello from Java_ArrayletTestJNI_testPrimitiveArrayCritical() Testing char array ************" << std::endl;
        jboolean isCopy;
        ElapsedTimer timer;
        char *elems;
        int arrayLength = (int)sizePtr;
        elems = (char*)env->GetPrimitiveArrayCritical(array, &isCopy);
        // Do something here, e.g. change arraylet elements
        std::cout << "Is it indexible(arraylet leaves) y/n: " << (((bool)isCopy) ? "yes" : "no") << ", arrayLength: " << arrayLength << std::endl;

        std::cout << "Elements at positions multiple of 4096 including 0\n";
        timer.startTimer();
        int i = 0;
        for(; i < arrayLength; i += 4096) {
                // std::cout << i << ":" << elems[i] << ", ";
                elems[i] = 'A';
        }
        elems[arrayLength-1] = 'I';
        int64_t elapsedTime = timer.getElapsedMicros();
        std::cout << "\nTotal time to write to " << (i/4096) << " buckets was " << elapsedTime << " micro seconds\n";

        env->ReleasePrimitiveArrayCritical(array, (jchar*)elems, JNI_COMMIT);
}

/*
 * Class:     ArrayletTestJNI
 * Method:    testStringCriticalArraylets
 * Signature: (Ljava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_ArrayletTestJNI_testStringCriticalArraylets
  (JNIEnv* env, jobject obj, jstring str, jint sizePtr)
{
	std::cout << "Hello from Java_ArrayletTestJNI_testStringArrayCritical() ********************************" << std::endl;
	jboolean isCopy;
        ElapsedTimer timer;
        jchar *elems;
        int strLength = (int)sizePtr;
        elems = (jchar*)env->GetStringCritical(str, &isCopy);
	std::cout << "Is it indexible(arraylet leaves) y/n: " << (((bool)isCopy) ? "yes" : "no") << ", strLength: " << strLength << "sizeof(char): " << sizeof(char) << std::endl;

	timer.startTimer();
        int i = 0;
        for(; i < strLength; i += 4096) {
                elems[i] = 'X';
		// std::cout << (char)elems[i] << ", ";
        }
	elems[strLength-3] = 'K';
	elems[strLength-2] = 'K';
        elems[strLength-1] = 'K';
        int64_t elapsedTime = timer.getElapsedMicros();
        std::cout << "\nTotal time to write to " << (i/4096) << " buckets was " << elapsedTime << " micro seconds\n";
        env->ReleaseStringCritical(str, (jchar*)elems);
}


